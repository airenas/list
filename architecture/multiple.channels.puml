@startuml MultipleChannels

skinparam sequence {
    ParticipantBorderColor Black
    ActorBorderColor Black

    ParticipantBackgroundColor White
    ActorBackgroundColor White

    ArrowColor black
    LifeLineBorderColor black
    LifeLineBackgroundColor lightgray

    BoxBorderColor black
}
skinparam databaseBackgroundColor White
skinparam dataBaseBorderColor Blue

hide footbox
title Audio with multiple channels

' skinparam handwritten true

actor User
participant "Upload Service" as upload
participant "DB" as db
participant "File System" as fs
participant "Queue Service" as queue
participant "SplitChannelsService" as ms
participant "Manager Service" as manager

User -> upload: upload
activate upload

upload -[#blue]> db: save request
activate db #lightblue
db -[#blue]-> upload:
deactivate db

upload -> fs: save file
activate fs
fs --> upload:
deactivate fs

upload -> queue: send Decode msg (sepSpeakersOnChannel=true)
activate queue
queue --> upload:
deactivate queue

upload --> User: response
deactivate upload

manager -> queue: listen Decode msgs
manager -> queue: listen SplitChannels_Result msgs

queue --> manager: new Decode msg
activate queue
activate manager
alt sepSpeakersOnChannel==true
    manager -> queue: send SplitChannels msg
    queue --> manager:
else     
    manager -> queue: send AudioConvert msg
    queue --> manager:
end
manager -> queue: ack
deactivate manager
deactivate queue


ms -> queue: listen SplitChannels msgs

queue --> ms: new SplitChannels msg
activate queue
activate ms
ms -> fs: split file into L and R channels
activate fs
fs --> ms:
deactivate fs

ms -> queue: send SplitChannels_Result msg
queue --> ms

ms -> queue: ack
deactivate queue
deactivate ms

queue --> manager: new SplitChannels_Result msg
activate queue
activate manager
manager -> queue: send DecodeMultiple msg (start Zoom decoding process)
queue --> manager:
manager -> queue: ack
deactivate manager
deactivate queue

@enduml
