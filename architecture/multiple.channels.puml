@startuml MultipleChannels

skinparam sequence {
ParticipantBorderColor Black
ActorBorderColor Black

ParticipantBackgroundColor White
ActorBackgroundColor White

ArrowColor black
LifeLineBorderColor black
LifeLineBackgroundColor lightgray

BoxBorderColor black
}
skinparam databaseBackgroundColor White
skinparam dataBaseBorderColor Blue

hide footbox
title Audio with multiple channels

' skinparam handwritten true

actor User
participant "Upload Service" as upload
participant "DB" as db
participant "File System" as fs
participant "Queue Service" as queue
participant "SplitChannelsService" as ms
participant "Manager Service" as manager

User -> upload: upload
activate upload

upload -[#blue]> db: save request
activate db #lightblue
db -[#blue]-> upload:
deactivate db

upload -> fs: save file
activate fs
fs --> upload:
deactivate fs

upload -> queue: send DecodeMultipleChannelsMsg
activate queue
queue --> upload:
deactivate queue

upload --> User: response
deactivate upload

manager -> queue: listen DecodeMultipleChannelsMsg
manager -> queue: listen SplitChannelsFinishedMsg

queue --> manager: new DecodeMultipleChannelsMsg
activate queue
activate manager
manager -> queue: send SplitChannelsMsgs
queue --> manager:
manager -> queue: ack
deactivate manager
deactivate queue


ms -> queue: listen SplitChannelsMsgs

queue --> ms: new split msg
activate queue

activate ms
ms -> fs: split file into L and R channels
activate fs
fs --> ms:
deactivate fs

ms -> queue: send SplitChannelsFinishedMsg
queue --> ms

ms -> queue: ack
deactivate queue
deactivate ms

queue --> manager: new SplitChannelsFinishedMsg
activate queue
activate manager
manager -> queue: send DecodeMultiple (start Zoom decoding process) 
queue --> manager:
manager -> queue: ack
deactivate manager
deactivate queue

@enduml
