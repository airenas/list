[http]
  [http.routers]
    [http.routers.transcriber]
      entryPoints = ["websecure"]
      service = "transcription"
      tls = true
      rule = "PathPrefix(`/ausis/transcriber`)"
    [http.routers.status]
      entryPoints = ["websecure"]
      service = "transcription"
      tls = true
      rule = "PathPrefix(`/ausis/status.service`)"
    [http.routers.result]
      entryPoints = ["websecure"]
      service = "transcription"
      tls = true
      rule = "PathPrefix(`/ausis/result.service`)" 

    [http.routers.https-redirect]
      entryPoints = ["web"]
      middlewares = ["https-redirect"]
      rule = "HostRegexp(`{host:.+}`)"
      service = "noop"
    
    [http.routers.default-redirect]
      entryPoints = ["websecure"]
      middlewares = ["default-redirect"]
      rule = "Path(`/`)"
      tls = true
      service = "noop"

    [http.routers.ausis-redirect]
      entryPoints = ["websecure"]
      middlewares = ["default-redirect"]
      rule = "Path(`/{path:(?i)ausis}`)"
      tls = true
      service = "noop"  


  [http.services]
    # noop service, the URL will be never called
    [http.services.noop.loadBalancer]
      [[http.services.noop.loadBalancer.servers]]
        url = "http://192.168.0.1"

    [http.services.transcription]
      [http.services.transcription.loadBalancer]
        passHostHeader = true
        [[http.services.transcription.loadBalancer.servers]]
          url = "${service_url}"

  [http.middlewares]
    [http.middlewares.https-redirect.redirectScheme]
      scheme = "https"

  [http.middlewares.default-redirect.redirectregex]
      regex = ".*"
      replacement="/ausis/" 
   
