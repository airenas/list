/*
 */
import com.aireno.gradle.DCRedeploy
import com.aireno.gradle.DBuild
import com.aireno.gradle.DPush

def main_dir = "../../../src/web/ear-app/"
def dist_dir = "deploy/"

task clean(type: Delete, group: project.name, description: "Deletes copied resources") {
    delete dist_dir
}

task updateVersion() {
    def sample = file(main_dir + 'src/environments/environment.prod.sample')
    def text = sample.getText("UTF-8")
    text = text.replaceAll('BUILD_VERSION', EAR_APP_VERSION)
    def ts = file(main_dir + 'src/environments/environment.prod.ts')
    ts.write(text, "UTF-8")
}

task build(type: Exec, group: project.name, description: "Compiles angular site") {
    commandLine 'ng', 'build', '--prod'
    workingDir main_dir
    dependsOn 'updateVersion'
}

task copy(type: Copy, group: project.name, description: "Copies htmls") {
    from main_dir + 'dist/ear-app/'
    into dist_dir + 'html/'
    dependsOn 'build'
}

task ddeploy(type: DCRedeploy, group: project.name, description: "Deploys web service") {
    serviceName = 'web'
    composePath = './..'
    mustRunAfter('copy')
}

task dbuild(type: DBuild, group: project.name) {
    tag = 'airenas/ear-app:' + EAR_APP_VERSION + commitCountExt
    mustRunAfter('copy')
}

task dpush(type: DPush, group: project.name) {
    tag = 'airenas/ear-app:' + EAR_APP_VERSION + commitCountExt
    mustRunAfter('dbuild')
}

task dall(group: project.name) {
    dependsOn copy, dbuild, dpush
}

task rd(group: project.name) {
    dependsOn copy, dbuild, ddeploy
}