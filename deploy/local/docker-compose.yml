version: '3.1'

services:
  reverse-proxy:
    image: traefik # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Tr√¶fik to listen to docker
    ports:
      - "7050:80"     # main proxy port
      - "7051:8080"   # proxy dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    restart: unless-stopped

  web:
    build: web
    restart: unless-stopped
    labels:
     - "traefik.frontend.rule=PathPrefixStrip:/ausis/"
     - "traefik.port=8000"

  upload-service:
    build: upload
    restart: unless-stopped
    volumes:
      - fileStorage:/data
    depends_on: 
      - rabbitmq  
      - mongo
    environment:
      MESSAGESERVER_URL: rabbitmq:5672/
      MESSAGESERVER_USER: list
      MESSAGESERVER_PASS_FILE: /run/secrets/rabbitmq_pass
    secrets:
      - rabbitmq_pass   
    labels:
     - "traefik.frontend.rule=PathPrefixStrip:/ausis/transcriber/"
     - "traefik.port=8000"  

  status-service:
    build: status
    restart: unless-stopped
    depends_on: 
      - mongo
      - rabbitmq  
    labels:
     - "traefik.frontend.rule=PathPrefixStrip:/ausis/result.provider/"
     - "traefik.port=8000" 
  
  manager-service:
    build: manager
    restart: unless-stopped
    depends_on: 
      - mongo
      - rabbitmq

  audio-prepare-service:
    build: audio.prepare
    restart: unless-stopped
    depends_on: 
      - rabbitmq
    volumes:
      - fileStorage:/data

  diarization-service:
    build: diarization
    restart: unless-stopped
    depends_on: 
      - rabbitmq
    volumes:
      - fileStorage:/data    
      - appsStorage:/apps
      - modelsStorage:/models    
  
  transcription-service:
    build: transcription
    restart: unless-stopped
    depends_on: 
      - rabbitmq
    volumes:
      - fileStorage:/data    
      - appsStorage:/apps
      - modelsStorage:/models      
  
  result-make-service:
    build: result.make
    restart: unless-stopped
    depends_on: 
      - rabbitmq
    volumes:
      - fileStorage:/data    
      - appsStorage:/apps
      - modelsStorage:/models  
      
  mongo:
    image: mongo:4.1.1
    environment:
     - MONGO_DATA_DIR=/data/db
     - MONGO_LOG_DIR=/dev/null
    #  - MONGODB_USER="list" 
    #  - MONGODB_PASS="list2018"
    volumes:
     - mongo:/data/db
    ports:
     - 27018:27017
    restart: unless-stopped     
    command: mongod --logpath=/dev/null # --quiet

  rabbitmq:
    image: "rabbitmq:3.7-management"
    hostname: "rabbitmq"
    environment:
      RABBITMQ_ERLANG_COOKIE: "0eaf0f4e-7078-44b0-970d-1c3d1277f9f2"
      RABBITMQ_DEFAULT_USER: "list"
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_pass
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "7052:15672"
      - "5672:5672"
    labels:
      NAME: "rabbitmq"
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    secrets:
      - rabbitmq_pass 

volumes:
  fileStorage:
    driver_opts:
      type: none
      device: /home/airenas/projects/list/volumes/fileStorage
      o: bind

  appsStorage:
    driver_opts:
      type: none
      device: /home/airenas/projects/list/volumes/apps
      o: bind

  modelsStorage:
    driver_opts:
      type: none
      device: /home/airenas/projects/list/volumes/models
      o: bind          

  rabbitmq:
    driver_opts:
      type: none
      device: /home/airenas/projects/list/volumes/rabbitmq
      o: bind     

  mongo:
    driver_opts:
      type: none
      device: /home/airenas/projects/list/volumes/mongo
      o: bind


secrets:
  rabbitmq_pass:
    file: ./rabbitmq_pass